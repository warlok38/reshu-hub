{"version":3,"file":"static/js/416.05a917d1.chunk.js","mappings":"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","sources":["pages/Add/ui/News/NewsForm.tsx","pages/Add/ui/Event/EventForm.tsx","pages/Add/ui/index.tsx","features/news/hooks/useCreateNews.ts","shared/lib/errors/invalidServerDataError.ts","shared/api/http/queryFnBuilder.ts","shared/utils/isProduction.ts","shared/models/news.ts","shared/api/news/consts.ts","shared/api/news/newsApi.ts"],"sourcesContent":["import React from 'react';\r\nimport { Button, CircularProgress, Stack, TextField } from '@mui/material';\r\nimport { CreateNewsEntity } from 'shared/models/news';\r\nimport { useForm } from 'react-hook-form';\r\nimport dayjs from 'dayjs';\r\nimport { DATE_FORMAT_API } from 'shared/constants/dateFormat';\r\n\r\ntype NewsFormProps = {\r\n  isLoading?: boolean;\r\n  onCreate: (data: CreateNewsEntity) => void;\r\n};\r\n\r\nexport function NewsForm({ isLoading, onCreate }: NewsFormProps) {\r\n  const { handleSubmit, register } = useForm<CreateNewsEntity>();\r\n  const submitHandler = (values: CreateNewsEntity) => {\r\n    onCreate?.(values);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(submitHandler)}>\r\n      <Stack spacing={4}>\r\n        <TextField\r\n          {...register('title')}\r\n          label=\"Заголовок\"\r\n        />\r\n        <TextField\r\n          {...register('subTitle')}\r\n          label=\"Подзаголовок\"\r\n        />\r\n        <TextField\r\n          {...register('newsText')}\r\n          label=\"Текст\"\r\n          multiline\r\n          rows={5}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          sx={{ width: 'fit-content' }}\r\n          disabled={isLoading}\r\n        >\r\n          Создать\r\n          {isLoading && (\r\n            <CircularProgress\r\n              sx={{ marginLeft: 2 }}\r\n              size=\"1em\"\r\n              color=\"secondary\"\r\n            />\r\n          )}\r\n        </Button>\r\n      </Stack>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  SelectChangeEvent,\r\n  Stack,\r\n  TextField,\r\n} from '@mui/material';\r\n\r\ntype SelectItemsMockType = { code: string; name: string };\r\n\r\nconst selectItemsMock: SelectItemsMockType[] = [\r\n  { code: '1', name: 'Конкурс' },\r\n  { code: '2', name: 'Хакатон' },\r\n  { code: '3', name: 'Экскурсия' },\r\n];\r\n\r\nexport function EventForm() {\r\n  const [selectedValue, setSelectedValue] = useState<string | undefined>();\r\n\r\n  const changeSelectHandler = (e: SelectChangeEvent) => {\r\n    setSelectedValue(e.target.value as string);\r\n  };\r\n\r\n  return (\r\n    <Stack spacing={4}>\r\n      <TextField label=\"Название\" />\r\n      <FormControl fullWidth>\r\n        <InputLabel id=\"demo-simple-select-label\">Тип</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={selectedValue}\r\n          label=\"Тип\"\r\n          onChange={changeSelectHandler}\r\n        >\r\n          {selectItemsMock.map(({ code, name }) => (\r\n            <MenuItem value={code}>{name}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n      <Stack\r\n        direction=\"row\"\r\n        spacing={4}\r\n      >\r\n        <TextField\r\n          label=\"Дата начала\"\r\n          sx={{ width: '100%' }}\r\n        />\r\n        <TextField\r\n          label=\"Дата окончания\"\r\n          sx={{ width: '100%' }}\r\n        />\r\n      </Stack>\r\n      <TextField label=\"Место проведения\" />\r\n      <TextField\r\n        label=\"Описание\"\r\n        multiline\r\n        rows={5}\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        sx={{ width: 'fit-content' }}\r\n      >\r\n        Создать\r\n      </Button>\r\n    </Stack>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  SelectChangeEvent,\r\n  Stack,\r\n} from '@mui/material';\r\nimport { NewsForm } from './News';\r\nimport { EventForm } from './Event';\r\nimport { useCreateNews } from 'features/news/hooks/useCreateNews';\r\n\r\ntype SelectMockCodes = 'news' | 'event';\r\ntype SelectItemsMockType = { code: SelectMockCodes; name: string };\r\n\r\nconst selectItemsMock: SelectItemsMockType[] = [\r\n  { code: 'news', name: 'Новость' },\r\n  { code: 'event', name: 'Мероприятие' },\r\n];\r\n\r\nconst AddPage = () => {\r\n  const [selectedValue, setSelectedValue] = useState<\r\n    SelectMockCodes | undefined\r\n  >();\r\n\r\n  const changeSelectHandler = (e: SelectChangeEvent) => {\r\n    setSelectedValue(e.target.value as SelectMockCodes);\r\n  };\r\n\r\n  const { onCreate, isLoading: isLoadingCreateNews } = useCreateNews();\r\n\r\n  return (\r\n    <Stack spacing={8}>\r\n      <Box sx={{ maxWidth: 320 }}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"demo-simple-select-label\">Создать</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={selectedValue}\r\n            label=\"Создать\"\r\n            onChange={changeSelectHandler}\r\n          >\r\n            {selectItemsMock.map(({ code, name }) => (\r\n              <MenuItem value={code}>{name}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n      {selectedValue === 'news' && (\r\n        <NewsForm\r\n          onCreate={onCreate}\r\n          isLoading={isLoadingCreateNews}\r\n        />\r\n      )}\r\n      {selectedValue === 'event' && <EventForm />}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default AddPage;\r\n","import { useCreateNewsMutation } from 'shared/api/news/newsApi';\r\n\r\nexport function useCreateNews() {\r\n  const [createNews, { isLoading, isError }] = useCreateNewsMutation();\r\n\r\n  return {\r\n    onCreate: createNews,\r\n    isLoading,\r\n    isError,\r\n  };\r\n}\r\n","import { z, BRAND, ZodIssue } from 'zod';\r\nimport { ErrorSchema, createError, isError } from './error';\r\n\r\nexport const InvalidServerDataErrorSchema = z\r\n  .object({\r\n    zodIssues: z.array(z.object({})),\r\n  })\r\n  .merge(ErrorSchema)\r\n  .brand<'InvalidServerData'>();\r\n\r\nexport type InvalidServerDataError = z.infer<\r\n  typeof InvalidServerDataErrorSchema\r\n>;\r\n\r\nexport function createInvalidServerDataError(\r\n  zodIssues: ZodIssue[],\r\n  message?: string\r\n): InvalidServerDataError {\r\n  return {\r\n    ...createError(message || 'Неправильный формат данных'),\r\n    [BRAND]: {\r\n      InvalidServerData: true,\r\n    },\r\n    zodIssues,\r\n  };\r\n}\r\n\r\nexport const isInvalidServerDataError = isError(InvalidServerDataErrorSchema);\r\n","import { BaseQueryFn } from '@reduxjs/toolkit/query';\r\nimport {\r\n  AxiosBaseQueryArgs,\r\n  AxiosBaseQueryMeta,\r\n  axiosBaseQuery,\r\n} from './axiosBaseQuery';\r\nimport {\r\n  BaseQueryApi,\r\n  BaseQueryExtraOptions,\r\n} from '@reduxjs/toolkit/dist/query/baseQueryTypes';\r\nimport { QueryReturnValue } from '@reduxjs/toolkit/src/query/baseQueryTypes';\r\nimport { Error } from 'shared/lib/errors/error';\r\nimport { ZodType } from 'zod';\r\nimport { isProduction } from 'shared/utils/isProduction';\r\nimport { isEmpty } from 'lodash';\r\nimport { createInvalidServerDataError } from 'shared/lib/errors/invalidServerDataError';\r\n\r\ntype QueryArgsOrArgsCreator<TQueryArg> =\r\n  | AxiosBaseQueryArgs\r\n  | ((args: TQueryArg) => AxiosBaseQueryArgs);\r\n\r\nfunction createQueryArgs<TQueryArg>(\r\n  queryArgsOrArgsCreator: QueryArgsOrArgsCreator<TQueryArg>,\r\n  queryArgs: TQueryArg\r\n) {\r\n  return typeof queryArgsOrArgsCreator === 'function'\r\n    ? queryArgsOrArgsCreator(queryArgs)\r\n    : queryArgsOrArgsCreator;\r\n}\r\n\r\ntype QueryFn<TResult, TQueryArg> = (\r\n  queryArgs: TQueryArg,\r\n  api: BaseQueryApi,\r\n  extraOptions: BaseQueryExtraOptions<BaseQueryFn>,\r\n  baseQuery: ReturnType<typeof axiosBaseQuery>\r\n) => Promise<QueryReturnValue<TResult, Error>>;\r\n\r\ntype TransformResponse<TResult, TResponse> = (\r\n  response: TResponse,\r\n  meta: AxiosBaseQueryMeta | undefined\r\n) => TResult;\r\n\r\nexport function createQueryFn<TResult, TQueryArg, TResponse>(\r\n  queryArgsOrArgsCreator: QueryArgsOrArgsCreator<TQueryArg>,\r\n  zodSchema: ZodType<TResponse extends undefined ? TResult : TResponse>,\r\n  transformResponse?: TransformResponse<TResult, TResponse>\r\n): QueryFn<TResult, TQueryArg>;\r\nexport function createQueryFn<TQueryArg>(\r\n  queryArgsOrArgsCreator: QueryArgsOrArgsCreator<TQueryArg>,\r\n  zodSchema?: never,\r\n  transformResponse?: never\r\n): QueryFn<undefined, TQueryArg>;\r\nexport function createQueryFn<TResult, TQueryArg, TResponse>(\r\n  queryArgsOrArgsCreator: QueryArgsOrArgsCreator<TQueryArg>,\r\n  zodSchema?: TResult extends undefined\r\n    ? undefined\r\n    : ZodType<TResponse extends undefined ? TResult : TResponse>,\r\n  transformResponse?: TResult extends undefined\r\n    ? undefined\r\n    : TransformResponse<TResult, TResponse>\r\n) {\r\n  return (\r\n    queryArgs: TQueryArg,\r\n    api: BaseQueryApi,\r\n    extraOptions: BaseQueryExtraOptions<BaseQueryFn>,\r\n    baseQuery: ReturnType<typeof axiosBaseQuery>\r\n  ): Promise<QueryReturnValue<TResult, Error>> =>\r\n    queryFn<TResult, TResponse>(\r\n      createQueryArgs<TQueryArg>(queryArgsOrArgsCreator, queryArgs),\r\n      api,\r\n      extraOptions,\r\n      baseQuery,\r\n      zodSchema,\r\n      transformResponse\r\n    );\r\n}\r\n\r\nasync function queryFn<TResult, TResponse>(\r\n  args: AxiosBaseQueryArgs,\r\n  api: BaseQueryApi,\r\n  extraOptions: BaseQueryExtraOptions<BaseQueryFn>,\r\n  baseQuery: ReturnType<typeof axiosBaseQuery>,\r\n  zodSchema?: ZodType,\r\n  transformResponse?: TransformResponse<TResult, TResponse>\r\n): Promise<QueryReturnValue<TResult, Error>> {\r\n  const response = await baseQuery(args, api, extraOptions);\r\n\r\n  if (!zodSchema || response.error) {\r\n    return response as QueryReturnValue<TResult, Error>;\r\n  }\r\n\r\n  const parsedData = zodSchema.safeParse(response.data);\r\n\r\n  if (parsedData.success) {\r\n    return {\r\n      data: transformResponse\r\n        ? transformResponse(parsedData.data, response.meta)\r\n        : parsedData.data,\r\n    };\r\n  }\r\n\r\n  if (!isProduction() && !isEmpty(parsedData.error.issues)) {\r\n    console.error('Zod issues: ', parsedData.error.issues);\r\n  }\r\n\r\n  return {\r\n    error: createInvalidServerDataError(\r\n      parsedData.error.issues,\r\n      parsedData.error.message\r\n    ),\r\n  };\r\n}\r\n","export function isProduction() {\r\n  const PROD_HOSTNAME = 'reshu-hub.ru';\r\n\r\n  return window.location.hostname === PROD_HOSTNAME;\r\n}\r\n","import { z } from 'zod';\r\n\r\nexport const NewsCategoryEntity = z.object({\r\n  id: z.number(),\r\n  category: z.string(),\r\n  stateArchive: z.boolean(),\r\n});\r\n\r\nexport const NewsImagesEntity = z.object({\r\n  id: z.number(),\r\n  imageName: z.string(),\r\n  description: z.string(),\r\n  fileHash: z.string(),\r\n});\r\n\r\nexport const NewsEntity = z.object({\r\n  title: z.string(),\r\n  subTitle: z.string(),\r\n  newsText: z.string(),\r\n  createDate: z.string(),\r\n  views: z.number(),\r\n  category: NewsCategoryEntity,\r\n  images: NewsImagesEntity.or(z.null()),\r\n});\r\n\r\nexport const NewsList = z.array(NewsEntity);\r\n\r\nexport type NewsEntity = z.infer<typeof NewsEntity>;\r\nexport type NewsList = z.infer<typeof NewsList>;\r\n\r\nexport const CreateNewsEntity = z.object({\r\n  title: z.string(),\r\n  subTitle: z.string(),\r\n  newsText: z.string(),\r\n  images: NewsImagesEntity.or(z.null()),\r\n});\r\n\r\nexport type CreateNewsEntity = z.infer<typeof CreateNewsEntity>;\r\n","export const NEWS_API = '/news';\r\n","import { mainApi } from 'shared/api/http/mainApi';\r\nimport { createQueryFn } from 'shared/api/http/queryFnBuilder';\r\nimport { CreateNewsEntity, NewsList } from 'shared/models/news';\r\nimport { NEWS_API } from './consts';\r\n\r\nexport const newsApi = mainApi.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    getNews: build.query<NewsList, void>({\r\n      queryFn: createQueryFn(\r\n        () => ({\r\n          url: NEWS_API,\r\n          method: 'GET',\r\n        }),\r\n        NewsList\r\n      ),\r\n    }),\r\n    createNews: build.mutation<void, CreateNewsEntity>({\r\n      queryFn: createQueryFn((data) => ({\r\n        url: NEWS_API,\r\n        method: 'POST',\r\n        data,\r\n      })),\r\n    }),\r\n  }),\r\n  overrideExisting: false,\r\n});\r\n\r\nexport const { useGetNewsQuery, useCreateNewsMutation } = newsApi;\r\n"],"names":["NewsForm","_ref","isLoading","onCreate","_useForm","useForm","handleSubmit","register","_jsx","onSubmit","values","children","_jsxs","Stack","spacing","TextField","_objectSpread","label","multiline","rows","Button","type","variant","sx","width","disabled","CircularProgress","marginLeft","size","color","selectItemsMock","code","name","EventForm","_useState","useState","_useState2","_slicedToArray","selectedValue","setSelectedValue","FormControl","fullWidth","InputLabel","id","Select","labelId","value","onChange","e","target","map","MenuItem","direction","_useCreateNews","_useCreateNewsMutatio","useCreateNewsMutation","_useCreateNewsMutatio2","createNews","_useCreateNewsMutatio3","isError","useCreateNews","isLoadingCreateNews","Box","maxWidth","InvalidServerDataErrorSchema","z","zodIssues","merge","ErrorSchema","brand","createInvalidServerDataError","message","_objectSpread2","createError","_defineProperty","BRAND","InvalidServerData","createQueryFn","queryArgsOrArgsCreator","zodSchema","transformResponse","queryArgs","api","extraOptions","baseQuery","_x","_x2","_x3","_x4","_x5","_x6","_queryFn","apply","arguments","queryFn","createQueryArgs","_asyncToGenerator","_regeneratorRuntime","mark","_callee","args","response","parsedData","wrap","_context","prev","next","sent","error","abrupt","safeParse","data","success","meta","window","location","hostname","isEmpty","issues","console","stop","NewsCategoryEntity","category","stateArchive","NewsImagesEntity","imageName","description","fileHash","NewsEntity","title","subTitle","newsText","createDate","views","images","or","NewsList","NEWS_API","newsApi","mainApi","endpoints","build","getNews","query","url","method","mutation","overrideExisting","useGetNewsQuery"],"sourceRoot":""}