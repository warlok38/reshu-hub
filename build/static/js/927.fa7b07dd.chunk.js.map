{"version":3,"file":"static/js/927.fa7b07dd.chunk.js","mappings":"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","sources":["features/auth/registration/ui/RegistrationForm.tsx","pages/Login/ui/index.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  Box,\r\n  Checkbox,\r\n  Divider,\r\n  FormControlLabel,\r\n  Stack,\r\n  TextField,\r\n} from '@mui/material';\r\nimport { PasswordInput } from 'shared/components/Input';\r\nimport * as S from 'features/auth/styled';\r\nimport { Controller, SubmitHandler, useForm } from 'react-hook-form';\r\n\r\ntype RegistrationFormValues = {\r\n  login: string;\r\n  email: string;\r\n  password: string;\r\n  passwordConfirm: string;\r\n  mailing: boolean;\r\n  rememberMe: boolean;\r\n};\r\n\r\nexport const RegistrationForm = () => {\r\n  const { handleSubmit, control, register } = useForm<RegistrationFormValues>();\r\n\r\n  const onSubmit: SubmitHandler<RegistrationFormValues> = (data) => {\r\n    console.log('form data', data);\r\n  };\r\n\r\n  return (\r\n    <S.Wrapper elevation={4}>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <Stack\r\n          direction=\"column\"\r\n          spacing={6}\r\n        >\r\n          <S.Title>Регистрация</S.Title>\r\n          <Controller\r\n            name=\"login\"\r\n            control={control}\r\n            rules={{\r\n              required: 'Обязательное поле',\r\n            }}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                error={!!error}\r\n                type=\"text\"\r\n                label=\"Логин\"\r\n                variant=\"outlined\"\r\n                helperText={error ? error.message : null}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n          <Controller\r\n            name=\"email\"\r\n            control={control}\r\n            rules={{\r\n              required: 'Обязательное поле',\r\n            }}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <TextField\r\n                error={!!error}\r\n                type=\"email\"\r\n                label=\"Почта\"\r\n                variant=\"outlined\"\r\n                helperText={error ? error.message : null}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n          <Controller\r\n            name=\"password\"\r\n            control={control}\r\n            rules={{\r\n              required: 'Обязательное поле',\r\n            }}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <PasswordInput\r\n                error={!!error}\r\n                label=\"Пароль\"\r\n                autoComplete=\"off\"\r\n                helperText={error ? error.message : null}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n          <Controller\r\n            name=\"passwordConfirm\"\r\n            control={control}\r\n            rules={{\r\n              required: 'Обязательное поле',\r\n              validate: (value, { password }) => {\r\n                if (value !== password) {\r\n                  return 'Пароли не совпадают';\r\n                }\r\n\r\n                return true;\r\n              },\r\n            }}\r\n            render={({ field, fieldState: { error } }) => (\r\n              <PasswordInput\r\n                error={!!error}\r\n                label=\"Подтвердите пароль\"\r\n                autoComplete=\"off\"\r\n                helperText={error ? error.message : null}\r\n                {...field}\r\n              />\r\n            )}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox name=\"mailing\" />}\r\n            label=\"Получать на почту новые уроки и полезные материалы от ReshUHub\"\r\n            slotProps={{ typography: { fontSize: '14px' } }}\r\n            {...register('mailing')}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox name=\"rememberMe\" />}\r\n            label=\"Запомнить меня\"\r\n            slotProps={{ typography: { fontSize: '14px' } }}\r\n            {...register('rememberMe')}\r\n          />\r\n          <Box textAlign=\"center\">\r\n            <S.StyledButton\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n            >\r\n              Зарегистрироваться\r\n            </S.StyledButton>\r\n          </Box>\r\n          <Divider sx={{ opacity: 0.5 }} />\r\n          <S.StyledLink to=\"/login\">Войти</S.StyledLink>\r\n        </Stack>\r\n      </form>\r\n    </S.Wrapper>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { StyledAuthLayout, LoginForm } from 'features/auth';\r\n\r\nconst Login = () => {\r\n  return (\r\n    <StyledAuthLayout>\r\n      <LoginForm />\r\n    </StyledAuthLayout>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["RegistrationForm","_useForm","useForm","handleSubmit","control","register","_jsx","S","elevation","children","onSubmit","data","console","log","_jsxs","Stack","direction","spacing","Controller","name","rules","required","render","_ref","field","error","fieldState","TextField","_objectSpread","type","label","variant","helperText","message","_ref2","_ref3","PasswordInput","autoComplete","validate","value","_ref4","password","_ref5","FormControlLabel","Checkbox","slotProps","typography","fontSize","Box","textAlign","Divider","sx","opacity","to","StyledAuthLayout","LoginForm"],"sourceRoot":""}